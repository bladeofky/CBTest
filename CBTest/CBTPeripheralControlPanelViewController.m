//
//  CBTPeripheralControlPanelViewController.m
//  CBTest
//
//  Created by Alan Wang on 1/5/15.
//  Copyright (c) 2015 Alan Wang. All rights reserved.
//

#import "CBTPeripheralControlPanelViewController.h"

@interface CBTPeripheralControlPanelViewController ()

@property (nonatomic, strong) CBPeripheralManager *peripheralManager;
@property (nonatomic, strong) CBUUID *serviceUUID;

@end

@implementation CBTPeripheralControlPanelViewController

#pragma mark - Accessors
-(CBPeripheralManager *)peripheralManager
{
    if (!_peripheralManager) {
        
        // Instantiate Peripheral Manager
        _peripheralManager = [[CBPeripheralManager alloc]initWithDelegate:self
                                                                    queue:nil
                                                                  options:nil];
        
        // Define custom UUIDs. These are randomly generated by calling uuidgen on terminal.
        NSString *characteristicUUIDString = @"5F524D49-AE0E-4AD8-99DF-2335E3F435EC";
        NSString *serviceUUIDString = @"5D3C11B7-4016-4DC2-908F-AB151C27B4FD";
        
        // Create UUID objects
        self.serviceUUID = [CBUUID UUIDWithString:serviceUUIDString];
        CBUUID *characteristicUUID = [CBUUID UUIDWithString:characteristicUUIDString];
        
        // Create characteristics
        NSString *stringToSend = @"Success!";
        NSData *dataToSend = [stringToSend dataUsingEncoding:NSUTF8StringEncoding];
        CBMutableCharacteristic *characteristic = [[CBMutableCharacteristic alloc]initWithType:characteristicUUID
                                                                                    properties:CBCharacteristicPropertyRead
                                                                                         value:dataToSend
                                                                                   permissions:CBAttributePermissionsReadable];
        
        // Create service
        CBMutableService *service = [[CBMutableService alloc]initWithType:self.serviceUUID primary:YES];
        service.characteristics = @[characteristic];
        
        // Publish service. After this service and characteristic are cached and can no longer be changed.
        [_peripheralManager addService:service];
    }
    
    return _peripheralManager;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    
    if (self.peripheralManager.isAdvertising) {
        [self.advertiseButton setTitle:@"Stop Advertising" forState:UIControlStateNormal];
    }
    else {
        [self.advertiseButton setTitle:@"Start Advertising" forState:UIControlStateNormal];
    }
    
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - View Model
-(NSString *)peripheralManagerStateAsString
{
    NSString *output;
    
    switch (self.peripheralManager.state) {
        case CBPeripheralManagerStateUnknown:
            output = @"The current state of the peripheral manager is unknown; an update is imminent.";
            break;
        case CBPeripheralManagerStateResetting:
            output = @"The connection with the system service was momentarily lost; an update is imminent.";
            break;
        case CBPeripheralManagerStateUnsupported:
            output = @"The platform doesn't support the Bluetooth low energy peripheral/server role.";
            break;
        case CBPeripheralManagerStateUnauthorized:
            output = @"The app is not authorized to use the Bluetooth low energy peripheral/server role.";
            break;
        case CBPeripheralManagerStatePoweredOff:
            output = @"Bluetooth is currently powered off.";
            break;
        case CBPeripheralManagerStatePoweredOn:
            output = @"CBPeripheralManagerStatePoweredOn.";
            break;
        default:
            output = @"Unknown Peripheral Manager State.";
            break;
    }
    
    return output;
}

#pragma mark - UITableViewDataSource
-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return 0;
}

#pragma mark - UITableViewDelegate

#pragma mark - CBPeripheralDelegate
-(void)peripheralManagerDidUpdateState:(CBPeripheralManager *)peripheral
{
    NSLog(@"Peripheral manager updated state to: %@", [self peripheralManagerStateAsString]);
    self.statusLabel.text = [self peripheralManagerStateAsString];
}

-(void)peripheralManager:(CBPeripheralManager *)peripheral didAddService:(CBService *)service error:(NSError *)error
{
    if (error) {
        NSLog(@"Error publishing service: %@", [error localizedDescription]);
    }
    else {
        NSLog(@"Successfully published service with UUID: %@", service.UUID.UUIDString);
    }
}

-(void)peripheralManagerDidStartAdvertising:(CBPeripheralManager *)peripheral error:(NSError *)error
{
    if (error) {
        NSLog(@"Error advertising services: %@", [error localizedDescription]);
    }
    else {
        NSLog(@"Began advertising services");
    }
}

#pragma mark - IBActions
- (IBAction)didPressAdvertiseButton:(UIButton *)sender
{
    if (self.peripheralManager.isAdvertising) {
        [self.peripheralManager stopAdvertising];
        [self.advertiseButton setTitle:@"Start Advertising" forState:UIControlStateNormal];
        NSLog(@"Stopped advertising");
    }
    else {
        [self.peripheralManager startAdvertising:@{ CBAdvertisementDataServiceUUIDsKey : @[self.serviceUUID] }];
        [self.advertiseButton setTitle:@"Stop Advertising" forState:UIControlStateNormal];
    }
}
@end
